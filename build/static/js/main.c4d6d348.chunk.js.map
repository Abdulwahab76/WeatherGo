{"version":3,"sources":["utils/fetchApi.js","components/drawer.js","App.js","serviceWorker.js","index.js"],"names":["options","method","headers","process","fetchData","url","a","async","fetch","response","json","data","SwipeableTemporaryDrawer","geocoding","React","left","state","setState","console","log","display_name","address","postcode","city","stateName","suburb","toggleDrawer","anchor","open","event","type","key","map","Button","onClick","style","color","fontSize","width","marginTop","marginLeft","SwipeableDrawer","onClose","onOpen","Box","sx","role","onKeyDown","padding","fontWeight","List","ListItem","display","flexDirection","alignItems","Divider","list","api","base","App","useState","query","setQuery","weather","setWeather","setGeocoding","setLoading","gpsLocation","setGpsLocation","setError","showPosition","position","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","geo","geocode","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","main","temp","placeholder","onChange","e","target","value","onKeyPress","evt","name","sys","country","Date","Math","round","src","icon","Tooltip","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4d6d348.chunk.js","sourcesContent":["export const options = {\r\n    method: 'GET',\r\n    headers: {\r\n        'X-RapidAPI-Key': process.env.REACT_APP_RAPID_KEY,\r\n        'X-RapidAPI-Host': 'forward-reverse-geocoding.p.rapidapi.com'\r\n    }\r\n};\r\n\r\nexport const fetchData = async(url, options)=>{\r\n    const response = await fetch(url,options)\r\n    const data = await response.json()\r\n    return data\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport SwipeableDrawer from '@mui/material/SwipeableDrawer';\r\nimport Button from '@mui/material/Button';\r\nimport List from '@mui/material/List';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\r\nimport MailIcon from '@mui/icons-material/Mail';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nexport default function SwipeableTemporaryDrawer({  geocoding }) {\r\n  const [state, setState] = React.useState({ left: false });\r\n  console.log('geo',geocoding);\r\n  const { display_name,address :{postcode,city,state:stateName,suburb\r\n  }} = geocoding\r\n  console.log('draw',stateName);\r\n\r\n  \r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === 'keydown' &&\r\n      (event.key === 'Tab' || event.key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n\r\n  const list = (anchor) => (\r\n    <Box\r\n      sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n      style={{ color: 'absolute' }}\r\n    >\r\n      <h2 style={{ padding: '15px 10px' }}><p>Weather<span style={{fontWeight:'lighter'}}>Go</span></p> </h2>\r\n      <List >\r\n        <ListItem sx={{ fontSize: '14px', display: 'flex', flexDirection: 'column', alignItems: 'flex-start', padding: '10px' }}>\r\n          <h3>Current Location</h3>\r\n          { display_name}\r\n        \r\n\r\n          <br />\r\n          <br />\r\n          <h3>PostCode</h3>\r\n          {postcode}\r\n          <br />\r\n          <br />\r\n\r\n          <h3>City</h3>\r\n          {city}\r\n          <br />\r\n          <br />\r\n          <h3>State</h3>\r\n          {stateName}\r\n          <br />\r\n          <br />\r\n          <h3>Area</h3>\r\n          {suburb}\r\n          <br />\r\n        </ListItem>\r\n\r\n\r\n      </List>\r\n      <Divider />\r\n\r\n    </Box >\r\n  );\r\n\r\n  return (\r\n    <div >\r\n      {['left'].map((anchor) => (\r\n        <React.Fragment key={anchor} >\r\n          <Button onClick={toggleDrawer(anchor, true)} style={{ color: 'white', fontSize: '23px', width: '30px', marginTop: '30px', marginLeft: '20px' }}> <MenuIcon /></Button>\r\n          <SwipeableDrawer\r\n            anchor={anchor}\r\n            open={state[anchor]}\r\n            onClose={toggleDrawer(anchor, false)}\r\n            onOpen={toggleDrawer(anchor, true)}\r\n          >\r\n            {list(anchor)}\r\n          </SwipeableDrawer>\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\nimport { fetchData, options } from './utils/fetchApi';\nimport { AiFillCloseCircle, AiOutlineClose, } from 'react-icons/ai';\nimport GpsFixedIcon from '@mui/icons-material/GpsFixed';\nimport TemporaryDrawer from './components/drawer'\nimport Tooltip from '@mui/material/Tooltip';\n\n\n\n\nconst api = {\n  key: \"62544921898d80ab50b8e34bd7f3f88a\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [latitude, setLatitude] = useState('')\n  const [longitude, setLongitude] = useState('')\n  const [geocoding, setGeocoding] = useState()\n  const [navbarOpen, setNavbarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [gpsLocation, setGpsLocation] = useState(false)\n  const [error, setError] = useState(false);\n\n  console.log('here', process.env.REACT_APP_RAPID_KEY);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      // setLatitude(position.coords.latitude)\n      // setLongitude(position.coords.longitude)\n      const geocode = async () => {\n        setLoading(true)\n        try {\n          setError(false);\n          let geo = await fetchData(`https://forward-reverse-geocoding.p.rapidapi.com/v1/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&accept-language=en&polygon_threshold=0.0`, options)\n          setGeocoding(geo)\n        } catch (err) {\n\n          setError(true);\n          console.log('err', err);\n        }\n        setLoading(false)\n      }\n      setLoading(false)\n      geocode()\n    })\n\n  }, [gpsLocation])\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  function showPosition(position) {\n\n  }\n  getLocation()\n\n\n  const search = async (evt) => {\n    if (evt.key === \"Enter\") {\n      try {\n        let data = await fetchData(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        setWeather(data)\n        setQuery('')\n      } catch (err) {\n      }\n\n\n    }\n  }\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  let icons = 'http://openweathermap.org/img/wn/'\n  return (\n    <div className='main'>\n      {!gpsLocation && <div className='cool-link'> <p> Weather<span>Go</span></p></div>}\n      {gpsLocation && <div className='drawer'>\n        <TemporaryDrawer geocoding={geocoding} />\n      </div>}\n\n\n\n      <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n        <main>\n\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search...\"\n              onChange={e => setQuery(e.target.value)}\n              value={query}\n              onKeyPress={search}\n            />\n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(weather.main.temp)}°c\n                </div>\n                <div className=\"weather\">\n                  <p>{weather.weather[0].main}</p>\n                  <img src={`${icons}/${weather.weather[0].icon}.png`} />\n                </div>\n              </div>\n            </div>\n          ) : <p>not</p>\n          }\n          <div onClick={() =>\n            setGpsLocation(!gpsLocation)\n\n          }>\n            <Tooltip title={gpsLocation ? \"Live Location On\" : 'Live Location Off'}><GpsFixedIcon className={gpsLocation ? 'gps blue' : 'gps'} /></Tooltip>\n\n\n          </div>\n          <footer>\n            <p>Made with WebDev || {dateBuilder(new Date())}</p>\n          </footer>\n        </main>\n\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}